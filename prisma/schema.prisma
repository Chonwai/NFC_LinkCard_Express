// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // 普通操作用，可以用連接池
  directUrl = env("POSTGRES_MIGRATION_URL") // migration用，必須直接連接
}

model User {
  id                     String               @id @default(uuid())
  username               String               @unique
  email                  String               @unique
  password               String
  display_name           String?              @map("display_name")
  avatar                 String?
  bio                    String?
  is_verified            Boolean              @default(false) @map("is_verified")
  verified_at            DateTime?            @map("verified_at")
  verification_token     String?              @map("verification_token")
  reset_password_token   String?              @map("reset_password_token")
  reset_password_expires DateTime?            @map("reset_password_expires")
  meta                   Json?                @default("{}")
  created_at             DateTime             @default(now()) @map("created_at")
  updated_at             DateTime             @updatedAt @map("updated_at")
  links                  Link[]
  profiles               Profile[]
  analytics              Analytics[]
  association            Association?
  memberOf               AssociationMember[]
  propertyInvitations    PropertyInvitation[] @relation("AcceptedInvitations") // 已接受的邀請
  sentPropertyInvitations PropertyInvitation[] @relation("SentInvitations")     // 已發送的邀請

  @@map("users")
}

model Profile {
  id                   String         @id @default(uuid())
  name                 String
  slug                 String         @unique
  user_id              String         @map("user_id")
  user                 User           @relation(fields: [user_id], references: [id])
  links                Link[]
  custom_domain        String?        @map("custom_domain")
  is_public            Boolean        @default(true) @map("is_public")
  is_default           Boolean        @default(false) @map("is_default")
  description          String?
  profile_image        String?        @map("profile_image")
  created_at           DateTime       @default(now()) @map("created_at")
  updated_at           DateTime       @updatedAt @map("updated_at")
  meta                 Json?          @default("{}")
  appearance           Json?          @default("{}")
  enable_lead_capture  Boolean        @default(false) @map("enable_lead_capture")
  lead_capture_fields  Json?          @map("lead_capture_fields")
  leads                Lead[]
  badges               ProfileBadge[] // 添加徽章關聯
  profileType          String         @default("DEFAULT") // Added for property MVP
  linkspaceAffiliation Json? // Added for property MVP, stores { spaceId, linkspaceUserId, ... }

  @@index([user_id])
  @@map("profiles")
}

model Link {
  id            String        @id @default(uuid())
  title         String
  url           String
  description   String?
  is_active     Boolean       @default(true) @map("is_active")
  click_count   Int           @default(0) @map("click_count")
  icon          String?
  user_id       String        @map("user_id")
  user          User          @relation(fields: [user_id], references: [id])
  display_order Int           @default(0) @map("display_order")
  created_at    DateTime      @default(now()) @map("created_at")
  updated_at    DateTime      @updatedAt @map("updated_at")
  profile_id    String        @map("profile_id")
  profile       Profile       @relation(fields: [profile_id], references: [id])
  meta          Json?         @default("{}")
  type          LinkType      @default(CUSTOM)
  platform      LinkPlatform?
  analytics     Analytics[]

  @@index([user_id])
  @@index([profile_id])
  @@map("links")
}

model Analytics {
  id         String   @id @default(uuid())
  user_id    String   @map("user_id")
  user       User     @relation(fields: [user_id], references: [id])
  link_id    String?  @map("link_id")
  link       Link?    @relation(fields: [link_id], references: [id])
  visitor_ip String   @map("visitor_ip")
  user_agent String?  @map("user_agent")
  referer    String?
  country    String?
  city       String?
  timestamp  DateTime @default(now())
  meta       Json?    @default("{}")

  @@index([user_id])
  @@index([link_id])
  @@map("analytics")
}

model Lead {
  id           String   @id @default(uuid())
  profile_id   String   @map("profile_id")
  profile      Profile  @relation(fields: [profile_id], references: [id])
  first_name   String   @map("first_name")
  last_name    String   @map("last_name")
  email        String
  phone_number String?  @map("phone_number")
  company      String?
  job_title    String?  @map("job_title")
  remark       String?
  created_at   DateTime @default(now()) @map("created_at")
  updated_at   DateTime @updatedAt @map("updated_at")

  @@index([profile_id])
  @@map("leads")
}

enum LinkType {
  CUSTOM
  SOCIAL
}

enum LinkPlatform {
  // Social Platforms
  GITHUB
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TELEGRAM
  WECHAT
  X
  YOUTUBE
  // Custom Platforms
  WEBSITE
  PHONE
  EMAIL
  LOCATION
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum MembershipTier {
  BASIC
  PREMIUM
  EXECUTIVE
}

enum MembershipStatus {
  ACTIVE // 活躍會員
  INACTIVE // 非活躍會員
  PENDING // 待批准
  EXPIRED // 會員已過期
  SUSPENDED // 會員已暫停（例如違反規定）
  TERMINATED // 會員已終止（例如由管理員終止）
  CANCELLED // 會員自行取消
}

model Association {
  id            String  @id @default(uuid())
  name          String
  slug          String  @unique
  description   String?
  logo          String?
  banner        String? // 協會橫幅圖片URL
  website       String?
  email         String?
  phone         String?
  address       String?
  socialLinks   Json?   @map("social_links") // 存儲社交媒體連結
  customization Json? // 存儲自定義設置（顏色、字體等）
  isPublic      Boolean @default(true) @map("is_public")
  badgeImage    String? @map("badge_image") // 協會徽章圖片URL

  // 關聯
  userId    String                 @unique @map("user_id")
  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  members   AssociationMember[]
  leads     AssociationLead[]
  analytics AssociationAnalytics[]
  badges    ProfileBadge[] // 添加徽章關聯

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("associations") // Map to snake_case plural
}

model AssociationMember {
  id String @id @default(uuid())

  // 協會關聯
  associationId String      @map("association_id")
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  // 用戶關聯
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role             MemberRole       @default(MEMBER)
  membershipTier   MembershipTier   @default(BASIC) @map("membership_tier")
  membershipStatus MembershipStatus @default(PENDING) @map("membership_status")

  displayInDirectory Boolean   @default(true) @map("display_in_directory")
  position           String? // 在協會中的職位
  joinDate           DateTime  @default(now()) @map("join_date")
  renewalDate        DateTime? @map("renewal_date") // 會員續費日期
  deleted_at         DateTime? @map("deleted_at") // 軟刪除時間戳

  meta Json? @default("{}")

  statusHistory MembershipHistory[] // 會員資格狀態變更歷史

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([associationId, userId], map: "association_members_association_id_user_id_key") // Explicitly map unique constraint name
  @@index([associationId])
  @@index([userId])
  @@map("association_members") // Map to snake_case plural
}

model AssociationLead {
  id String @id @default(uuid())

  // 協會關聯
  associationId String      @map("association_id")
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  email        String
  phone        String?
  organization String?
  message      String?
  status       String  @default("NEW") // NEW, CONTACTED, CONVERTED, REJECTED

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([associationId])
  @@index([email])
  @@map("association_leads") // Map to snake_case plural
}

model AssociationAnalytics {
  id String @id @default(uuid())

  // 協會關聯
  associationId String      @map("association_id")
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  eventType String @map("event_type")
  meta      Json?

  createdAt DateTime @default(now()) @map("created_at")

  @@index([associationId])
  @@index([eventType])
  @@index([createdAt])
  @@map("association_analytics") // Map to snake_case plural
}

// 個人檔案徽章模型 - 表示在用戶檔案上顯示的協會徽章
model ProfileBadge {
  id String @id @default(uuid())

  // 關聯
  profileId     String      @map("profile_id")
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  associationId String      @map("association_id")
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  // 屬性
  displayOrder Int              @default(0) @map("display_order") // 顯示順序
  isVisible    Boolean          @default(true) @map("is_visible") // 是否顯示
  customLabel  String?          @map("custom_label") // 自定義標籤
  customColor  String?          @map("custom_color") // 自定義顏色
  customSize   String?          @map("custom_size") // 自定義大小 (小、中、大)
  displayMode  BadgeDisplayMode @default(FULL) @map("display_mode")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([profileId, associationId], map: "profile_badges_profile_id_association_id_key") // Explicitly map unique constraint name
  @@index([profileId])
  @@index([associationId])
  @@map("profile_badges")
}

enum BadgeDisplayMode {
  HIDDEN
  BADGE_ONLY
  FULL
}

// 新增會員歷史記錄模型
model MembershipHistory {
  id                    String            @id @default(uuid())
  association_member_id String            @map("association_member_id")
  associationMember     AssociationMember @relation(fields: [association_member_id], references: [id], onDelete: Cascade)
  previous_status       MembershipStatus  @map("previous_status")
  new_status            MembershipStatus  @map("new_status")
  changed_by            String            @map("changed_by") // 用戶ID
  reason                String?
  created_at            DateTime          @default(now()) @map("created_at")

  @@index([association_member_id])
  @@map("membership_history")
}

// New model for Property Invitations
model PropertyInvitation {
  id               String           @id @default(cuid())
  email            String // 被邀請者的郵箱
  spaceId          String // 邀請他們加入的 LinkSpace Space ID
  linkspaceUserId  String? // (可選) 被邀請者在 LinkSpace 系統中的預設用戶ID
  invitationToken  String           @unique // 發送給用戶的唯一邀請令牌
  status           InvitationStatus @default(PENDING) // PENDING, ACCEPTED, EXPIRED
  expiresAt        DateTime? // 令牌過期時間
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  
  acceptedByUserId String?          // 接受邀請的 LinkCard User ID
  acceptedUser     User?            @relation("AcceptedInvitations", fields: [acceptedByUserId], references: [id])
  
  invitedByUserId  String           // 發起邀請的 LinkCard User ID
  invitedByUser    User             @relation("SentInvitations", fields: [invitedByUserId], references: [id])
  
  acceptedAt       DateTime?        // 邀請被接受的時間

  @@index([email])
  @@index([spaceId])
  @@index([invitedByUserId])
  @@map("property_invitations")
}

// New enum for Invitation Status
enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
