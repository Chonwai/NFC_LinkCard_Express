// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                     String              @id @default(uuid())
  username               String              @unique
  email                  String              @unique
  password               String
  display_name           String?             @map("display_name")
  avatar                 String?
  bio                    String?
  is_verified            Boolean             @default(false) @map("is_verified")
  verified_at            DateTime?
  verification_token     String?             @map("verification_token")
  reset_password_token   String?             @map("reset_password_token")
  reset_password_expires DateTime?           @map("reset_password_expires")
  meta                   Json?               @default("{}")
  created_at             DateTime            @default(now()) @map("created_at")
  updated_at             DateTime            @updatedAt @map("updated_at")
  links                  Link[]
  profiles               Profile[]
  analytics              Analytics[]
  association            Association?
  memberOf               AssociationMember[]

  @@map("users")
}

model Profile {
  id                  String         @id @default(uuid())
  name                String
  slug                String         @unique
  user_id             String         @map("user_id")
  user                User           @relation(fields: [user_id], references: [id])
  links               Link[]
  custom_domain       String?        @map("custom_domain")
  is_public           Boolean        @default(true) @map("is_public")
  is_default          Boolean        @default(false) @map("is_default")
  description         String?
  profile_image       String?        @map("profile_image")
  created_at          DateTime       @default(now()) @map("created_at")
  updated_at          DateTime       @updatedAt @map("updated_at")
  meta                Json?          @default("{}")
  appearance          Json?          @default("{}")
  enable_lead_capture Boolean        @default(false)
  lead_capture_fields Json?
  leads               Lead[]
  badges              ProfileBadge[] // 添加徽章關聯

  @@index([user_id])
  @@map("profiles")
}

model Link {
  id            String        @id @default(uuid())
  title         String
  url           String
  description   String?
  is_active     Boolean       @default(true) @map("is_active")
  click_count   Int           @default(0) @map("click_count")
  icon          String?
  user_id       String        @map("user_id")
  user          User          @relation(fields: [user_id], references: [id])
  display_order Int           @default(0) @map("display_order")
  created_at    DateTime      @default(now()) @map("created_at")
  updated_at    DateTime      @updatedAt @map("updated_at")
  profile_id    String        @map("profile_id")
  profile       Profile       @relation(fields: [profile_id], references: [id])
  meta          Json?         @default("{}")
  type          LinkType      @default(CUSTOM)
  platform      LinkPlatform?
  analytics     Analytics[]

  @@index([user_id])
  @@index([profile_id])
  @@map("links")
}

model Analytics {
  id         String   @id @default(uuid())
  user_id    String   @map("user_id")
  user       User     @relation(fields: [user_id], references: [id])
  link_id    String?  @map("link_id")
  link       Link?    @relation(fields: [link_id], references: [id])
  visitor_ip String   @map("visitor_ip")
  user_agent String?  @map("user_agent")
  referer    String?
  country    String?
  city       String?
  timestamp  DateTime @default(now())
  meta       Json?    @default("{}")

  @@index([user_id])
  @@index([link_id])
  @@map("analytics")
}

model Lead {
  id           String   @id @default(uuid())
  profile_id   String   @map("profile_id")
  profile      Profile  @relation(fields: [profile_id], references: [id])
  first_name   String
  last_name    String
  email        String
  phone_number String?
  company      String?
  job_title    String?
  remark       String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([profile_id])
  @@map("leads")
}

enum LinkType {
  CUSTOM
  SOCIAL
}

enum LinkPlatform {
  // Social Platforms
  GITHUB
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TELEGRAM
  WECHAT
  X
  YOUTUBE
  // Custom Platforms
  WEBSITE
  PHONE
  EMAIL
  LOCATION
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum MembershipTier {
  BASIC
  PREMIUM
  EXECUTIVE
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Association {
  id            String  @id @default(uuid())
  name          String
  slug          String  @unique
  description   String?
  logo          String?
  banner        String? // 協會橫幅圖片URL
  website       String?
  email         String?
  phone         String?
  address       String?
  socialLinks   Json? // 存儲社交媒體連結
  customization Json? // 存儲自定義設置（顏色、字體等）
  isPublic      Boolean @default(true)
  badgeImage    String? // 協會徽章圖片URL

  // 關聯
  userId    String                 @unique
  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  members   AssociationMember[]
  leads     AssociationLead[]
  analytics AssociationAnalytics[]
  badges    ProfileBadge[] // 添加徽章關聯

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model AssociationMember {
  id String @id @default(uuid())

  // 協會關聯
  associationId String
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  // 用戶關聯
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role             MemberRole       @default(MEMBER)
  membershipTier   MembershipTier   @default(BASIC)
  membershipStatus MembershipStatus @default(PENDING)

  displayInDirectory Boolean   @default(true)
  position           String? // 在協會中的職位
  joinDate           DateTime  @default(now())
  renewalDate        DateTime? // 會員續費日期

  meta Json? @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([associationId, userId])
  @@index([associationId])
  @@index([userId])
}

model AssociationLead {
  id String @id @default(uuid())

  // 協會關聯
  associationId String
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  firstName    String
  lastName     String
  email        String
  phone        String?
  organization String?
  message      String?
  status       String  @default("NEW") // NEW, CONTACTED, CONVERTED, REJECTED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([associationId])
  @@index([email])
}

model AssociationAnalytics {
  id String @id @default(uuid())

  // 協會關聯
  associationId String
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  eventType String
  meta      Json?

  createdAt DateTime @default(now())

  @@index([associationId])
  @@index([eventType])
  @@index([createdAt])
}

// 個人檔案徽章模型 - 表示在用戶檔案上顯示的協會徽章
model ProfileBadge {
  id String @id @default(uuid())

  // 關聯
  profileId     String
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  associationId String
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  // 屬性
  displayOrder Int     @default(0) // 顯示順序
  isVisible    Boolean @default(true) // 是否顯示
  customLabel  String? // 自定義標籤
  customColor  String? // 自定義顏色
  customSize   String? // 自定義大小 (小、中、大)
  displayMode  BadgeDisplayMode @default(FULL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, associationId])
  @@index([profileId])
  @@index([associationId])
  @@map("profile_badges")
}

enum BadgeDisplayMode {
  HIDDEN
  BADGE_ONLY
  FULL
}
