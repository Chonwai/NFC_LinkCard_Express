---
description: 
globs: 
alwaysApply: true
---
# NFC LinkCard Express - 項目架構說明

## 1. 概述

本文檔旨在為新加入的工程師提供 NFC LinkCard Express 項目的整體架構概覽，幫助理解代碼的組織方式、主要的設計決策以及未來的演進方向。本項目旨在構建一個可靠、可擴展且易於維護的 NFC 數字名片後端服務。

## 2. 當前架構：模塊化單體

目前，NFC LinkCard Express 採用**模塊化單體 (Modular Monolith)** 架構。這意味著整個應用程序作為一個單一部署單元運行，但其內部代碼按邏輯功能和業務域進行了模塊化組織。

### 2.1. 核心設計原則
- **分層架構 (Layered Architecture)**：嚴格的職責分離，確保各層獨立性。
- **模塊化設計 (Modular Design)**：按業務功能或共享關注點組織代碼。
- **依賴注入 (Dependency Injection)**：利用 TypeDI 解耦組件。
- **面向接口編程 (Interface-Oriented Programming)**：鼓勵使用接口定義協約。

## 3. 代碼組織 (Code Organization)

源代碼位於 `src/` 目錄下，其主要結構和職責如下：

```
src/
├── app.ts                    # Express 應用主入口和全局配置
├── swagger.ts                # Swagger API 文檔配置
│
├── common/                   # 跨業務模塊的共享代碼
│   ├── middleware/           # 通用中間件 (如錯誤處理、日誌)
│   ├── utils/                # 通用工具函數 (如 ApiResponse)
│   └── types/                # 共享的 TypeScript 類型定義
│
├── config/                   # 應用配置 (如數據庫、JWT、郵件服務)
├── controllers/              # 控制器層：處理 HTTP 請求，進行數據驗證和轉換
├── dtos/                     # 數據傳輸對象 (DTOs)：定義請求和響應的數據結構
├── lib/                      # 第三方庫的封裝或適配器 (如 Prisma Client)
├── middleware/               # 核心中間件 (如認證 authMiddleware)
├── routes/                   # API 路由定義，按資源或功能組織
├── services/                 # 服務層：封裝核心業務邏輯
├── storage/                  # 文件存儲服務的實現 (如 Vercel Blob)
├── templates/                # 郵件模板等
├── validators/               # 自定義 class-validator 驗證器
│
└── association/              # 【業務模塊示例】協會版特定功能
    ├── controllers/
    ├── services/
    ├── dtos/
    └── routes/
    └── ... (其他協會版相關代碼)

```

### 3.1. 技術分層 (Technical Layers)

無論是全局代碼還是特定業務模塊內部，都普遍遵循以下技術分層：

-   **路由層 (`routes/`)**:
    -   定義 API 端點 (Endpoints)。
    -   將請求分發到相應的控制器方法。
    -   應用路由級別的中間件。
-   **控制器層 (`controllers/`)**:
    -   接收和解析 HTTP 請求。
    -   使用 DTOs 和 `class-validator` 驗證和轉換請求數據。
    -   調用服務層執行業務操作。
    -   使用 `ApiResponse` 工具格式化並返回 HTTP 響應。
    -   處理 HTTP 層面的錯誤。
-   **服務層 (`services/`)**:
    -   包含核心業務邏輯和業務規則。
    -   協調數據訪問、第三方服務調用等。
    -   通常是事務邊界。
    -   與具體的 HTTP 細節解耦。
-   **數據訪問層 (Data Access Layer)**:
    -   主要通過 Prisma ORM (`src/lib/prisma.ts`) 與數據庫交互。
    -   服務層調用 Prisma Client 執行 CRUD 操作。
    -   數據模型定義在 `prisma/schema.prisma`。

### 3.2. 共享代碼 (`common/`)

`common/` 目錄用於存放被多個業務模塊或整個應用程序共享的代碼，例如：
-   基礎中間件 (如全局錯誤處理)。
-   通用的工具函數 (如 `ApiResponse` 用於標準化響應)。
-   共享的 TypeScript 類型和接口。

這麼做的目的是提高代碼複用性，並保持核心業務邏輯的純粹性。

### 3.3. 業務模塊化 (Business Modularity)

如 `association/` 目錄所示，項目已經開始按業務域進行模塊化。每個業務模塊（例如：個人版、協會版、未來可能的企業版）將包含其特定的控制器、服務、路由、DTO 等。

**優勢**:
-   **高內聚、低耦合**: 模塊內部緊密相關，模塊之間依賴清晰。
-   **獨立開發與部署 (未來)**: 為將來演進到微服務架構奠定基礎。
-   **支持多版本功能**: 便於管理不同版本（個人、協會、企業）的特定邏輯和數據。

目前，核心的用戶認證 (`auth`) 和用戶管理 (`user`) 等功能，雖然在架構藍圖中規劃會放入 `core/` 模塊，但現階段其邏輯可能分散在通用的 `controllers/`、`services/` 和 `routes/` 中，並通過 `common/` 提供共享能力。隨著項目的發展，這些核心功能會進一步整合和提煉。

## 4. 設計模式的應用

項目中關鍵的設計模式應用包括：

-   **分層架構**: 如上所述，保證了職責分離。
-   **依賴注入 (DI)**:
    -   使用 `typedi` 實現。
    -   服務和控制器通過 `@Service()` 標記，並在其構造函數中注入依賴。
    -   降低了組件間的耦合，提高了可測試性。
-   **數據傳輸對象 (DTO)**:
    -   `class-transformer` 和 `class-validator` 用於請求數據的轉換和驗證。
    -   確保進入服務層的數據是有效和類型安全的。
-   **倉儲模式 (Repository Pattern) - 隱式**:
    -   Prisma Client 在一定程度上扮演了倉儲的角色，抽象了數據庫的直接交互。
-   **中間件模式 (Middleware Pattern)**:
    -   Express.js 的核心特性，用於處理橫切關注點，如認證、日誌、CORS、錯誤處理等。

## 5. 數據流 (Data Flow)

一個典型的 API 請求處理流程如下：

1.  **HTTP 請求** 到達 Express 應用。
2.  **全局中間件** (如 CORS, body-parser, 日誌) 被執行。
3.  **路由匹配**: Express 根據請求路徑和方法將請求導向 `src/routes/` 中定義的相應路由處理器。
4.  **路由級中間件** (如 `authMiddleware` 進行身份驗證) 被執行。
5.  **控制器方法** (`src/controllers/` 或業務模塊下的控制器) 被調用。
    -   控制器使用 DTOs 驗證和轉換請求數據。
6.  **服務方法** (`src/services/` 或業務模塊下的服務) 被調用，執行核心業務邏輯。
    -   服務可能與 Prisma Client 交互以操作數據庫。
    -   服務可能調用其他服務或工具。
7.  **服務層返回結果** 給控制器。
8.  **控制器格式化響應** (使用 `ApiResponse`) 並將其發送回客戶端。
9.  **錯誤處理**:
    -   在控制器和服務層使用 `try-catch` 捕獲預期錯誤。
    -   通過 `ApiResponse.error()` 返回標準化錯誤響應。
    -   未捕獲的錯誤可能由全局錯誤處理中間件處理。

## 6. 架構演進方向 (Architectural Evolution)

根據項目的 `ARCHITECTURE_BLUEPRINT.mdc`，當前的模塊化單體架構是向更可擴展架構演進的第一步。

### 6.1. 近期規劃 (模塊化深化)
-   **核心模塊提取**: 將用戶管理、認證等核心共享功能明確提取到一個獨立的 `core/` 模塊中，服務於所有業務版本（個人、協會、企業）。
-   **業務模塊完善**: 繼續完善和新增業務模塊（如 `personal/`, `business/`），使其職責更清晰。

### 6.2. 長期願景 (微服務)
-   長遠來看，當前清晰的模塊化設計為未來向**微服務架構**的平滑過渡奠定了基礎。屆時，各個業務模塊（如用戶服務、協會服務、通知服務等）可以被拆分為獨立部署的微服務，以實現更高的擴展性、容錯性和團隊獨立性。

## 7. 多版本支持 (Multi-Tenancy/Multi-Version Considerations)

系統設計旨在支持多個版本（例如個人版、協會版、企業版），這在架構層面主要通過以下方式體現：

-   **數據模型**: `User` 模型中的 `role` (如 `UserRole` 枚舉) 用於區分不同類型的用戶，並控制其訪問權限。
-   **業務模塊化**: 每個版本可以擁有自己的業務模塊 (如 `association/`) 來實現特定功能。
-   **權限控制**: 通過中間件 (如 `checkRole`) 結合用戶角色進行精細化的權限管理，確保用戶只能訪問其被授權的功能和數據。
-   **共享核心**: 核心功能（如用戶管理、認證）被設計為可共享，避免重複開發。

## 8. 總結

NFC LinkCard Express 採用了一個經過深思熟慮的模塊化單體架構，它在保持開發效率和易部署性的同時，兼顧了代碼的組織性、可維護性和未來的可擴展性。通過清晰的分層、模塊化以及對設計模式的合理運用，為新工程師提供了一個相對容易理解和上手的代碼庫。理解當前的架構和未來的演進方向，有助於更好地參與項目開發並做出符合長遠目標的技術決策。

